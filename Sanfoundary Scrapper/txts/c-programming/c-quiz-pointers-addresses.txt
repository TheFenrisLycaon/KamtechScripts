Sanfoundry’s 1000+ MCQs on C helps anyone preparing for placement in Persistent Systems and other companies. Anyone looking for Persistent placement papers should practice these 1000+ questions continuously for 2-3 months, thereby ensuring a top position in placements.
Here is a listing of C quiz on “Pointer Addresses” along with answers, explanations and/or solutions:
1. What will be the output of the following C code?
    #include <stdio.h>    int main()    {        char *p = NULL;        char *q = 0;        if (p)            printf(" p ");        else            printf("nullp");        if (q)            printf("q\n");        else            printf(" nullq\n");    }
a) nullp nullq
b) Depends on the compiler
c) x nullq where x can be p or nullp depending on the value of NULL
d) p q
a
2. What will be the output of the following C code?
    #include <stdio.h>    int main()    {        int i = 10;        void *p = &i;        printf("%d\n", (int)*p);        return 0;    }
a) Compile time error
b) Segmentation fault/runtime crash
c) 10
d) Undefined behaviour
a
3. What will be the output of the following C code?
    #include <stdio.h>    int main()    {        int i = 10;        void *p = &i;        printf("%f\n", *(float*)p);        return 0;    }
a) Compile time error
b) Undefined behaviour
c) 10
d) 0.000000
d
4. What will be the output of the following C code?
    #include <stdio.h>    int *f();    int main()    {        int *p = f();        printf("%d\n", *p);    }    int *f()    {        int *j = (int*)malloc(sizeof(int));        *j = 10;        return j;    }
a) 10
b) Compile time error
c) Segmentation fault/runtime crash since pointer to local variable is returned
d) Undefined behaviour
a
5. What will be the output of the following C code?
    #include <stdio.h>    int *f();    int main()    {        int *p = f();        printf("%d\n", *p);    }    int *f()    {        int j = 10;        return &j;    }
a) 10
b) Compile time error
c) Segmentation fault/runtime crash
d) Undefined behaviour
a
6. Comment on the following pointer declaration.
int *ptr, p;
a) ptr is a pointer to integer, p is not
b) ptr and p, both are pointers to integer
c) ptr is a pointer to integer, p may or may not be
d) ptr and p both are not pointers to integer
a
7. What will be the output of the following C code?
    #include <stdio.h>    int main()    {        int *ptr, a = 10;        ptr = &a;        *ptr += 1;        printf("%d,%d/n", *ptr, a);    }
a) 10,10
b) 10,11
c) 11,10
d) 11,11
d
8. Comment on the following C statement.
const int *ptr;
a) You cannot change the value pointed by ptr
b) You cannot change the pointer ptr itself
c) You May or may not change the value pointed by ptr
d) You can change the pointer as well as the value pointed by it
a
Sanfoundry Global Education & Learning Series – C Programming Language.
C Practice ResourcesC Mock Tests & Certification Test | 1000 C MCQs | 1000 C Programs | 1000 C Algorithms | Best C Books | C Internship
Participate in the Sanfoundry Certification contest to get free Certificate of Merit. Join our social networks below and stay updated with latest contests, videos, internships and jobs!
Telegram | Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
« Prev - C Programming Questions and Answers – Conditional Inclusion – 2» Next - C Programming Questions and Answers – Pointers and Addresses – 2 
