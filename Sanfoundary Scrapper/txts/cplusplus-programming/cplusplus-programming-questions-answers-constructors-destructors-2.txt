1. What is the difference between constructors and destructors?
a) They have a different function name
b) Constructors does not have return type whereas destructors do have
c) Constructors allow function parameters whereas destructors do not
d) Constructors does not function parameters
c
2. How many Destructors are allowed in a Class?
a) 1
b) 2
c) 3
d) Any number
a
3. What will be the output of the following C++ code?
#include <iostream>
#include <string>
using namespace std;
class A{
	mutable int a;
public:
	A(){
		cout<<"A's Constructor called\n";
	}
	~A(){
		cout<<"A's Destructor called\n";
	}
};
class B{
	A a;
public:
	B(){
		cout<<"B's Constructor called\n";
	}
	~B(){
		cout<<"B's Destructor called\n";
	}
};
int main(int argc, char const *argv[])
{
	B b1;
}
a)
A's Constructor called
B's Constructor called
b)
A's Destructor called
B's Destructor called
c) 
A's Constructor called
B's Constructor called
B's Destructor called
A's Destructor called
d)
A's Constructor called
B's Constructor called
A's Destructor called
B's Destructor called
c
  
4. What will be the output of the following C++ code?
#include <iostream>
#include <string>
using namespace std;
class A{
	mutable int a;
public:
	A(){
		cout<<"A's Constructor called\n";
	}
	~A(){
		cout<<"A's Destructor called\n";
	}
};
class B: public A{
public:
	B(){
		cout<<"B's Constructor called\n";
	}
	~B(){
		cout<<"B's Destructor called\n";
	}
};
int main(int argc, char const *argv[])
{
	B b1;
}
a)
A's Constructor called
B's Constructor called
b) 
A's Destructor called
B's Destructor called
c)
A's Constructor called
B's Constructor called
B's Destructor called
A's Destructor called
d) 
A's Constructor called
B's Constructor called
A's Destructor called
B's Destructor called
c
  
5. What will be the output of the following C++ code?
#include <iostream>
#include <string>
using namespace std;
class A{
	mutable int a;
public:
	A(){
		cout<<"A's Constructor called\n";
	}
	~A(){
		cout<<"A's Destructor called\n";
	}
};
class B: public A{
	A a;
public:
	B(){
		cout<<"B's Constructor called\n";
	}
	~B(){
		cout<<"B's Destructor called\n";
	}
};
int main(int argc, char const *argv[])
{
	B b1;
}
a)
A's Constructor called
B's Constructor called
b)
A's Destructor called
B's Destructor called
c) 
A's Constructor called
A's Constructor called
B's Constructor called
B's Destructor called
A's Destructor called
A's Destructor called
d) 
A's Constructor called
B's Constructor called
A's Destructor called
B's Destructor called
c
  
6. What will be the output of the following C++ code?
#include <iostream>
#include <string>
using namespace std;
class A{
	mutable int a;
public:
	A(){
		cout<<"A's Constructor called\n";
	}
	~A(){
		cout<<"A's Destructor called\n";
	}
};
class B{
	static A a;
public:
	B(){
		cout<<"B's Constructor called\n";
	}
	~B(){
		cout<<"B's Destructor called\n";
	}
};
int main(int argc, char const *argv[])
{
	B b1;
}
a)
A's Constructor called
B's Constructor called
b)
B's Constructor called
B's Destructor called
c)
A's Constructor called
B's Constructor called
B's Destructor called
A's Destructor called
d)
A's Constructor called
B's Constructor called
A's Destructor called
B's Destructor called
b
  
7. What will be the output of the following C++ code?
#include <iostream>
#include <string>
using namespace std;
class A{
	mutable int a;
public:
	A(){
		cout<<"A's Constructor called\n";
	}
	~A(){
		cout<<"A's Destructor called\n";
	}
};
 
class B{
	static A a;
public:
	B(){
		cout<<"B's Constructor called\n";
	}
	~B(){
		cout<<"B's Destructor called\n";
	}
};
 
A B::a;
 
int main(int argc, char const *argv[])
{
	return 0;
}
a) 
A's Constructor called
A's Destructor called
b)
B's Constructor called
B's Destructor called
c)
A's Constructor called
B's Constructor called
B's Destructor called
A's Destructor called
d)
A's Constructor called
B's Constructor called
A's Destructor called
B's Destructor called
a
  
8. Which of the following represents the correct explicit call to a constructor of class A?
class A{
		int a;
	        public:
		A(int i)
                {
			a = i;
		}
       }
a) A a(5);
b) A a;
c) A a = A(5);
d) A a = A();
c
Sanfoundry Global Education & Learning Series – C++ Programming Language.
C++ Practice ResourcesC++ Mock Tests & Certification Test | 1000 C++ MCQs | 1000 C++ Algorithms | Best C++ Books
Participate in the Sanfoundry Certification contest to get free Certificate of Merit. Join our social networks below and stay updated with latest contests, videos, internships and jobs!
Telegram | Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
« Prev - C++ Programming Questions and Answers – Constructors and Destructors – 1» Next - C++ Programming Questions and Answers – Constructors and Destructors – 3 
