1. What will be the output of the following Java code?
    import java.util.*;    public class genericstack <E>    {        Stack <E> stk = new Stack <E>();	public void push(E obj)         {            stk.push(obj);	}	public E pop()        {            E obj = stk.pop();	    return obj;	}    }    class Output    {        public static void main(String args[])        {            genericstack <String> gs = new genericstack<String>();            gs.push("Hello");            System.out.println(gs.pop());        }    }
a) H
b) Hello
c) Runtime Error
d) Compilation Error
b
Output:
$ javac Output.javac
$ java Output
Hello
2. What will be the output of the following Java code?
    import java.util.*;    public class genericstack <E>    {        Stack <E> stk = new Stack <E>();	public void push(E obj)        {            stk.push(obj);	}	public E pop()        {            E obj = stk.pop();	    return obj;	}    }    class Output    {        public static void main(String args[])        {            genericstack <Integer> gs = new genericstack<Integer>();            gs.push(36);            System.out.println(gs.pop());        }    }
a) 0
b) 36
c) Runtime Error
d) Compilation Error
b
Output:
$ javac Output.javac
$ java Output
36
3. What will be the output of the following Java code?
    import java.util.*;    public class genericstack <E>    {        Stack <E> stk = new Stack <E>();	public void push(E obj)        {            stk.push(obj);	}	public E pop()        {            E obj = stk.pop();	    return obj;	}    }    class Output    {        public static void main(String args[])        {            genericstack <String> gs = new genericstack<String>();            gs.push("Hello");            System.out.print(gs.pop() + " ");            genericstack <Integer> gs = new genericstack<Integer>();            gs.push(36);            System.out.println(gs.pop());        }    }
a) Error
b) Hello
c) 36
d) Hello 36
d
Output:
$ javac Output.javac
$ java Output
Hello 36
4. What will be the output of the following Java program?
    import java.util.*;    public class genericstack <E>     {        Stack <E> stk = new Stack <E>();	public void push(E obj)        {            stk.push(obj);	}	public E pop()        {            E obj = stk.pop();	    return obj;	}    }    class Output     {        public static void main(String args[])        {            genericstack <Integer> gs = new genericstack<Integer>();            gs.push(36);            System.out.println(gs.pop());        }    }
a) H
b) Hello
c) Runtime Error
d) Compilation Error
d
Output:
$ javac Output.javac
$ java Output
5. What will be the output of the following Java program?
    import java.util.*;    public class genericstack <E>    {        Stack <E> stk = new Stack <E>();	public void push(E obj)        {            stk.push(obj);	}	public E pop()        {            E obj = stk.pop();	    return obj;	}    }    class Output    {        public static void main(String args[])        {            genericstack <Integer> gs = new genericstack<Integer>();            gs.push(36);            System.out.println(gs.pop());        }    }
a) H
b) Hello
c) Runtime Error
d) Compilation Error
d
Output:
$ javac Output.javac
$ java Output
6. Which of these Exception handlers cannot be type parameterized?
a) catch
b) throw
c) throws
d) all of the mentioned
d
7. Which of the following cannot be Type parameterized?
a) Overloaded Methods
b) Generic methods
c) Class methods
d) Overriding methods
a
Sanfoundry Global Education & Learning Series – Java Programming Language.
Java Practice ResourcesJava Mock Tests & Certification Test | 1000 Java MCQs | 1000 Java Programs | 1000 Java Algorithms | Best Java Books
Participate in the Sanfoundry Certification contest to get free Certificate of Merit. Join our social networks below and stay updated with latest contests, videos, internships and jobs!
Telegram | Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
Youtube | LinkedIn | Instagram | Facebook | Twitter | Pinterest
« Prev - Java Questions & Answers – Coding best practices» Next - Java Questions & Answers – Generic Methods 
